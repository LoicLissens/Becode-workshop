{"ast":null,"code":"var _jsxFileName = \"/Users/loiclissens/Desktop/workshop-electron-init/src/systemspecs.js\";\nimport React, { useEffect, useState } from \"react\";\nconst channels = [\"type\", \"arch\", \"platform\", \"freemem\", \"totalmem\", \"hostname\"];\n\nconst convertToMb = number => {\n  if (Number.isInteger(number)) {\n    const mb = number / 1048576; // one megabyte = 1.048.576 bytes\n\n    const rounded = mb.toFixed(1);\n    return `${rounded} mb`;\n  } else {\n    return \"\";\n  }\n};\n\nconst SystemSpecs = () => {\n  const [specs, setSpecs] = useState({});\n  const [, refresh] = useState(0);\n\n  const receiveSpecs = elements => {\n    let object = {};\n    elements.forEach(element => {\n      // utilisé pour récupérer les données envoyées par Electron. Prend comme paramètre une string et un callback.\n      window.ipcRenderer.on(element, (event, message) => {\n        object[element] = message;\n      });\n    });\n    setSpecs(object);\n    console.log(object);\n  };\n\n  const handleRefresh = () => {\n    refresh();\n    console.log(specs);\n  };\n\n  useEffect(() => {\n    receiveSpecs(channels);\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"OS: \", specs.type), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Architecture: \", specs.arch), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Platforme: \", specs.platform), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Nom du PC: \", specs.hostname), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"M\\xE9moire totale: \", convertToMb(specs.totalmem), \" bytes\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"M\\xE9moire restante: \", convertToMb(specs.freemem), \" bytes\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: handleRefresh,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"refresh\")));\n};\n\nexport default SystemSpecs;","map":{"version":3,"sources":["/Users/loiclissens/Desktop/workshop-electron-init/src/systemspecs.js"],"names":["React","useEffect","useState","channels","convertToMb","number","Number","isInteger","mb","rounded","toFixed","SystemSpecs","specs","setSpecs","refresh","receiveSpecs","elements","object","forEach","element","window","ipcRenderer","on","event","message","console","log","handleRefresh","type","arch","platform","hostname","totalmem","freemem"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,MAAMC,QAAQ,GAAG,CAAC,MAAD,EAAS,MAAT,EAAiB,UAAjB,EAA6B,SAA7B,EAAwC,UAAxC,EAAoD,UAApD,CAAjB;;AAEA,MAAMC,WAAW,GAAIC,MAAD,IAAY;AAC9B,MAAIC,MAAM,CAACC,SAAP,CAAiBF,MAAjB,CAAJ,EAA8B;AAC5B,UAAMG,EAAE,GAAGH,MAAM,GAAG,OAApB,CAD4B,CACC;;AAC7B,UAAMI,OAAO,GAAGD,EAAE,CAACE,OAAH,CAAW,CAAX,CAAhB;AACA,WAAQ,GAAED,OAAQ,KAAlB;AACD,GAJD,MAIO;AACL,WAAO,EAAP;AACD;AACF,CARD;;AAUA,MAAME,WAAW,GAAG,MAAM;AACxB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,GAAGY,OAAH,IAAcZ,QAAQ,CAAC,CAAD,CAA5B;;AAEA,QAAMa,YAAY,GAAIC,QAAD,IAAc;AACjC,QAAIC,MAAM,GAAG,EAAb;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAkBC,OAAD,IAAa;AAC5B;AACAC,MAAAA,MAAM,CAACC,WAAP,CAAmBC,EAAnB,CAAsBH,OAAtB,EAA+B,CAACI,KAAD,EAAQC,OAAR,KAAoB;AACjDP,QAAAA,MAAM,CAACE,OAAD,CAAN,GAAkBK,OAAlB;AACD,OAFD;AAGD,KALD;AAMAX,IAAAA,QAAQ,CAACI,MAAD,CAAR;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACD,GAVD;;AAYA,QAAMU,aAAa,GAAG,MAAM;AAC1Bb,IAAAA,OAAO;AACPW,IAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;AACD,GAHD;;AAKAX,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,YAAY,CAACZ,QAAD,CAAZ;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAASS,KAAK,CAACgB,IAAf,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAmBhB,KAAK,CAACiB,IAAzB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBjB,KAAK,CAACkB,QAAtB,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBlB,KAAK,CAACmB,QAAtB,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAqB3B,WAAW,CAACQ,KAAK,CAACoB,QAAP,CAAhC,WALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAuB5B,WAAW,CAACQ,KAAK,CAACqB,OAAP,CAAlC,WANF,CADF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,OAAO,EAAEN,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CATF,CADF;AAeD,CAxCD;;AAyCA,eAAehB,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst channels = [\"type\", \"arch\", \"platform\", \"freemem\", \"totalmem\", \"hostname\"];\n\nconst convertToMb = (number) => {\n  if (Number.isInteger(number)) {\n    const mb = number / 1048576; // one megabyte = 1.048.576 bytes\n    const rounded = mb.toFixed(1);\n    return `${rounded} mb`;\n  } else {\n    return \"\";\n  }\n};\n\nconst SystemSpecs = () => {\n  const [specs, setSpecs] = useState({});\n  const [, refresh] = useState(0);\n\n  const receiveSpecs = (elements) => {\n    let object = {};\n    elements.forEach((element) => {\n      // utilisé pour récupérer les données envoyées par Electron. Prend comme paramètre une string et un callback.\n      window.ipcRenderer.on(element, (event, message) => {\n        object[element] = message;\n      });\n    });\n    setSpecs(object);\n    console.log(object);\n  };\n\n  const handleRefresh = () => {\n    refresh();\n    console.log(specs);\n  };\n\n  useEffect(() => {\n    receiveSpecs(channels);\n  }, []);\n\n  return (\n    <div>\n      <ul>\n        <li>OS: {specs.type}</li>\n        <li>Architecture: {specs.arch}</li>\n        <li>Platforme: {specs.platform}</li>\n        <li>Nom du PC: {specs.hostname}</li>\n        <li>Mémoire totale: {convertToMb(specs.totalmem)} bytes</li>\n        <li>Mémoire restante: {convertToMb(specs.freemem)} bytes</li>\n      </ul>\n      <div>\n        <button onClick={handleRefresh}>refresh</button>\n      </div>\n    </div>\n  );\n};\nexport default SystemSpecs;\n"]},"metadata":{},"sourceType":"module"}