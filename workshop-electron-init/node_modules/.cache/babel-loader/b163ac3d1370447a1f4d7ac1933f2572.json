{"ast":null,"code":"import _slicedToArray from\"/Users/loiclissens/Desktop/workshop-electron-init/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";var channels=[\"type\",\"arch\",\"platform\",\"freemem\",\"totalmem\",\"hostname\"];var convertToMb=function convertToMb(number){if(Number.isInteger(number)){var mb=number/1048576;// one megabyte = 1.048.576 bytes\nvar rounded=mb.toFixed(1);return\"\".concat(rounded,\" mb\");}else{return\"\";}};var SystemSpecs=function SystemSpecs(){var _useState=useState({}),_useState2=_slicedToArray(_useState,2),specs=_useState2[0],setSpecs=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),refresh=_useState4[1];var receiveSpecs=function receiveSpecs(elements){var object={};elements.forEach(function(element){// utilisé pour récupérer les données envoyées par Electron. Prend comme paramètre une string et un callback.\nwindow.ipcRenderer.on(element,function(event,message){object[element]=message;});});setSpecs(object);console.log(object);};var handleRefresh=function handleRefresh(){refresh();console.log(specs);};useEffect(function(){receiveSpecs(channels);},[]);return React.createElement(\"div\",null,React.createElement(\"ul\",null,React.createElement(\"li\",null,\"OS: \",specs.type),React.createElement(\"li\",null,\"Architecture: \",specs.arch),React.createElement(\"li\",null,\"Platforme: \",specs.platform),React.createElement(\"li\",null,\"Nom du PC: \",specs.hostname),React.createElement(\"li\",null,\"M\\xE9moire totale: \",convertToMb(specs.totalmem),\" bytes\"),React.createElement(\"li\",null,\"M\\xE9moire restante: \",convertToMb(specs.freemem),\" bytes\")),React.createElement(\"div\",null,React.createElement(\"button\",{onClick:handleRefresh},\"refresh\")));};export default SystemSpecs;","map":{"version":3,"sources":["/Users/loiclissens/Desktop/workshop-electron-init/src/systemspecs.js"],"names":["React","useEffect","useState","channels","convertToMb","number","Number","isInteger","mb","rounded","toFixed","SystemSpecs","specs","setSpecs","refresh","receiveSpecs","elements","object","forEach","element","window","ipcRenderer","on","event","message","console","log","handleRefresh","type","arch","platform","hostname","totalmem","freemem"],"mappings":"oIAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CAEA,GAAMC,CAAAA,QAAQ,CAAG,CAAC,MAAD,CAAS,MAAT,CAAiB,UAAjB,CAA6B,SAA7B,CAAwC,UAAxC,CAAoD,UAApD,CAAjB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,MAAD,CAAY,CAC9B,GAAIC,MAAM,CAACC,SAAP,CAAiBF,MAAjB,CAAJ,CAA8B,CAC5B,GAAMG,CAAAA,EAAE,CAAGH,MAAM,CAAG,OAApB,CAA6B;AAC7B,GAAMI,CAAAA,OAAO,CAAGD,EAAE,CAACE,OAAH,CAAW,CAAX,CAAhB,CACA,gBAAUD,OAAV,QACD,CAJD,IAIO,CACL,MAAO,EAAP,CACD,CACF,CARD,CAUA,GAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,eACET,QAAQ,CAAC,EAAD,CADV,wCACjBU,KADiB,eACVC,QADU,8BAEJX,QAAQ,CAAC,CAAD,CAFJ,yCAEfY,OAFe,eAIxB,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,QAAD,CAAc,CACjC,GAAIC,CAAAA,MAAM,CAAG,EAAb,CACAD,QAAQ,CAACE,OAAT,CAAiB,SAACC,OAAD,CAAa,CAC5B;AACAC,MAAM,CAACC,WAAP,CAAmBC,EAAnB,CAAsBH,OAAtB,CAA+B,SAACI,KAAD,CAAQC,OAAR,CAAoB,CACjDP,MAAM,CAACE,OAAD,CAAN,CAAkBK,OAAlB,CACD,CAFD,EAGD,CALD,EAMAX,QAAQ,CAACI,MAAD,CAAR,CACAQ,OAAO,CAACC,GAAR,CAAYT,MAAZ,EACD,CAVD,CAYA,GAAMU,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1Bb,OAAO,GACPW,OAAO,CAACC,GAAR,CAAYd,KAAZ,EACD,CAHD,CAKAX,SAAS,CAAC,UAAM,CACdc,YAAY,CAACZ,QAAD,CAAZ,CACD,CAFQ,CAEN,EAFM,CAAT,CAIA,MACE,gCACE,8BACE,qCAASS,KAAK,CAACgB,IAAf,CADF,CAEE,+CAAmBhB,KAAK,CAACiB,IAAzB,CAFF,CAGE,4CAAgBjB,KAAK,CAACkB,QAAtB,CAHF,CAIE,4CAAgBlB,KAAK,CAACmB,QAAtB,CAJF,CAKE,oDAAqB3B,WAAW,CAACQ,KAAK,CAACoB,QAAP,CAAhC,UALF,CAME,sDAAuB5B,WAAW,CAACQ,KAAK,CAACqB,OAAP,CAAlC,UANF,CADF,CASE,+BACE,8BAAQ,OAAO,CAAEN,aAAjB,YADF,CATF,CADF,CAeD,CAxCD,CAyCA,cAAehB,CAAAA,WAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst channels = [\"type\", \"arch\", \"platform\", \"freemem\", \"totalmem\", \"hostname\"];\n\nconst convertToMb = (number) => {\n  if (Number.isInteger(number)) {\n    const mb = number / 1048576; // one megabyte = 1.048.576 bytes\n    const rounded = mb.toFixed(1);\n    return `${rounded} mb`;\n  } else {\n    return \"\";\n  }\n};\n\nconst SystemSpecs = () => {\n  const [specs, setSpecs] = useState({});\n  const [, refresh] = useState(0);\n\n  const receiveSpecs = (elements) => {\n    let object = {};\n    elements.forEach((element) => {\n      // utilisé pour récupérer les données envoyées par Electron. Prend comme paramètre une string et un callback.\n      window.ipcRenderer.on(element, (event, message) => {\n        object[element] = message;\n      });\n    });\n    setSpecs(object);\n    console.log(object);\n  };\n\n  const handleRefresh = () => {\n    refresh();\n    console.log(specs);\n  };\n\n  useEffect(() => {\n    receiveSpecs(channels);\n  }, []);\n\n  return (\n    <div>\n      <ul>\n        <li>OS: {specs.type}</li>\n        <li>Architecture: {specs.arch}</li>\n        <li>Platforme: {specs.platform}</li>\n        <li>Nom du PC: {specs.hostname}</li>\n        <li>Mémoire totale: {convertToMb(specs.totalmem)} bytes</li>\n        <li>Mémoire restante: {convertToMb(specs.freemem)} bytes</li>\n      </ul>\n      <div>\n        <button onClick={handleRefresh}>refresh</button>\n      </div>\n    </div>\n  );\n};\nexport default SystemSpecs;\n"]},"metadata":{},"sourceType":"module"}